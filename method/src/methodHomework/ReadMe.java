package methodHomework;

public class ReadMe {
	/*
아래의 내용을 확인하고 올바른 클래스를 구현하고

1. 다음 표의 내용을 보고 Calulator 클래스 내에 메소드를 구현하고 결과를 출력한다.
패키지명 : ex01
Calculator 클래스

메서드(calcNum)
정수형 2개의 ‘매개변수’를 넘겨 받아, 더한 값을 출력해주는 기능을 가진 메소드 구현

메서드(calcNum)
정수형 1개, 실수형 1개의 ‘매개변수’를 넘겨 받아 더한 결과값을 반환(return)해 주는 기능을 가진 메소드 구현

메서드(calcNum)
실수형 1개를 ‘매개변수’로 넘겨 받아 정수형으로 바꿔주고 결과값을 반환(return)해 주는 기능을 가진 메소드 메소드 구현

메서드(calcNum)
문자열 매개변수 2개를 넘겨받아 연결해서 출력하는 기능을 가진 메소드

 
메인 메소드   

클래스의 객체를 메모리에 할당하여, 클래스 객체가 가진 모든 메소드 호출하여
오류를 검증하고 결과 확인한다.

 
2. 배열을 이용하여 아래와 같은 형식으로 출력한다.

패키지명 : ex02
클래스명 : TwoArray

[출력결과]
배열의 행 길이 : 3
배열의 열 길이 : 4
1 2 3 4 
5 6 7 8
9 10 11 12
 

3. 다음 표의 내용을 보고 각 클래스 내에 메소드를 구현하고 결과를 출력한다.

패키지명 : ex03


Person 클래스(부모클래스)

필드
각 필드의 이름과 타입을 정확히 입력하세요.

이름(name), 나이(age), 직업(job), 취미(hobby)

생성자   
기본 생성자와 매개변수 4개가 있는 생성자,
총 2개를 생성자를 생성하세요.

이름(name)과 나이(age)와 직업(job) 그리고 취미(hobby)를 초기화 생성자로 설정한다.
*참조 : this는 생략가능하지만 무조건 사용해야 한다.
 
메소드   
이름을 출력 메소드를 구현하세요.
ex) "홍길동"

1. 메소드의 이름은 printName이다.
2. 리턴타입은 존재하지 않는다.
3. 매개변수를 받지 않는다.

하고 있는 일을 출력하는 메소드(work) : 리턴타입x, 매개변수 x
ex)"OO은 하는 일이 없습니다."
*OO은 해당 필드의 직업을 넣으세요.

취미를 출력하는 메소드(hobby) : 리턴타입x, 매개변수 x
"취미는 잠자기 입니다."를 출력하는 메소드


Student 클래스(자식클래스)
*Student 클래스는 Person 클래스를 상속받는 클래스이다

필드   
학생은 공부하는 학번(number)의 필드 값 정수형으로 존재한다.

생성자   
모든 매개변수를 받는 생성자(부모클래스의 생성자 호출)를 만드세요.

메소드   
work 메소드 오버라이딩
ex) “OO은 공부를 합니다.” 출력하는 메소드
*OO은 해당 필드의 직업의 이름을 넣으세요.

hobby 메소드 오버라이딩
1~10까지 출력
for반복문으로 구현하시오.

printNumber 메소드 : 리턴타입x, 매개변수 x
학생의 학번을 출력해주는 메서드를 구현하세요.
"학생의 이름은 OOO이며 학번은 OOO입니다"를 출력
*OOO은 해당 필드의 이름과 학번을 넣으세요.

Programmer 클래스(자식클래스)
*Programmer 클래스는 Person 클래스를 상속받는 클래스이다

필드   
학생은 공부하는 노트북(notebook)의 필드 값 불리언(boolean)형으로 존재한다.

생성자   
모든 매개변수를 받는 생성자(부모클래스의 생성자 호출)를 만드세요.

메소드   
work 메소드 오버라이딩
ex) “OO은 코딩을 합니다.” 출력하는 메소드
*OO은 해당 필드의 직업의 이름을 넣으세요.

hobby 메소드 오버라이딩
배열(arData)에 A, B, C, D를 담고
ABCD를 순서대로 출력하시오.

isNotebook 메소드 : 리턴타입x, 매개변수 x
개발자의 노트북이 있으면 노트북이 있습니다.
없으면 노트북이 없습니다를 출력(if~else문 사용)

PersonMain 클래스
main 메소드를 구성하여 아래의 조건을 모두 실행하세요.

메서드
1.학생(student), 프로그래머(programmer)를 Person 클래스 타입으로 업캐스팅하여 객체화(instance)를 생성한다.
2. Person으로 업캐스팅한 객체를 다운캐스팅하여 
각각 아래에 메서드를 모두 호출하세요

Student : work, hobby, printNumber
programmer : work, hobby, isNotebook;

	 * 
	 * 	
	*/	
}
